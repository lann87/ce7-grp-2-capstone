name: Terraform CI workflow
run-name: Running Terraform CI workflow by ${{ github.actor }}

on:
  pull_request:
    branches:
      - "*"
    paths:
      - "terraform/*"

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout
  pull-requests: write # This is required for updating pull-requests with comments

jobs:
  Terraform-Checks:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: terraform

    outputs:
      fmt_outcome: ${{ steps.fmt.outcome }}
      init_outcome: ${{ steps.init.outcome }}
      validate_outcome: ${{ steps.validate.outputs.stdout }}
      tflint_outcome: ${{ steps.tflint.outcome }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt check
        id: fmt
        run: terraform fmt -check

      - name: Terraform init
        id: init
        run: terraform init -backend=false

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4

      - name: Show version
        run: tflint --version

      - name: Init TFLint
        run: tflint --init

      - name: Run TFLint
        id: tflint
        run: tflint -f compact

  Snyk-IAC-Scan:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: terraform

    # outputs:
    #   snyk_iac_outcome: ${{ steps.snyk_iac.outcome }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Snyk CLI
        run: npm install -g snyk

      # - name: Run Snyk Code Scan And Check Snyk Scan Results
      #   id: snyk_iac
      #   uses: snyk/actions/iac@master
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   with:
      #     args: "--report --severity-threshold=high --scan=resource-changes"

  Checkov:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: terraform

    # outputs:
    #   checkov_outcome: ${{ steps.checkov.outcome }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # - name: Checkov
      #   id: checkov
      #   uses: bridgecrewio/checkov-action@master
      #   with:
      #     framework: terraform

  Terraform-Plan:
    needs: [Terraform-Checks, Snyk-IAC-Scan, Checkov]
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: terraform

    outputs:
      plan_detail: ${{ steps.plan.outputs.stdout }}
      plan_outcome: ${{ steps.plan.outcome }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          audience: sts.amazonaws.com
          role-to-assume: arn:aws:iam::255945442255:role/ce7-grp-2-oidc-role

      - name: Terraform Init
        run: terraform init

      - name: Terraform workspace list
        run: terraform workspace list

      - name: Terraform workspace new environment and select
        run: |
          terraform workspace select -or-create=true ${{ github.base_ref }}
          terraform workspace list

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -var-file="${{ github.base_ref }}.tfvars"

  Update-Pull-Request:
    needs: [Terraform-Checks, Terraform-Plan, Snyk-IAC-Scan]
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Update Pull Request
        if: always()
        uses: actions/github-script@v7
        env:
          PLAN_DETAIL: ${{ needs.Terraform-Plan.outputs.plan_detail }}
          PLAN_OUTCOME: ${{ needs.Terraform-Plan.outputs.plan_outcome }}
          FMT_OUTCOME: ${{ needs.Terraform-Checks.outputs.fmt_outcome }}
          INIT_OUTCOME: ${{ needs.Terraform-Checks.outputs.init_outcome }}
          VALIDATE_OUTPUTS_STDOUT: ${{ needs.Terraform-Checks.outputs.validate_outcome }}
          TFLINT_OUTCOME: ${{ needs.Terraform-Checks.outputs.tflint_outcome }}
          # SNYK_IAC_OUTCOME: ${{ needs.Snyk-IAC-Scan.outputs.snyk_iac_outcome }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${process.env.FMT_OUTCOME}\`
            #### Terraform Initialization ‚öôÔ∏è\`${process.env.INIT_OUTCOME}\`
            #### Terraform Validation ü§ñ${process.env.VALIDATE_OUTPUTS_STDOUT}
            #### Terraform Lint üßπ\`${process.env.TFLINT_OUTCOME}\`
            #### Snyk IAC Scan üîç\`${process.env.SNYK_IAC_OUTCOME}\`
            #### Checkov üîç\`${process.env.SNYK_IAC_OUTCOME}\`
            #### Terraform Plan üìñ\`${process.env.PLAN_OUTCOME}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN_DETAIL}\`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
