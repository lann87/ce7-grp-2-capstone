name: Docker CI workflow
run-name: Running Docker CI workflow by ${{ github.actor }}

on:
  pull_request:
    branches:
      - "*"
    paths:
      - "files/*"
      - "hello-world/*"

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout
  # pull-requests: write # This is required for updating pull-requests with comments

jobs:
  Security-Audit:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: hello-world

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "23"

      - name: Run installation of dependencies commands
        run: npm install

      - name: Run a security audit
        id: npm-audit
        run: |
          # Run npm audit and capture output
          output=$(npm audit --audit-level=high --json)

          # Check if there are vulnerabilities found
          if [ $? -eq 0 ]; then
            echo "NPM audit completed successfully with no high vulnerabilities found." >> $GITHUB_STEP_SUMMARY
          else
            echo "NPM audit found the following high vulnerabilities:" >> $GITHUB_STEP_SUMMARY
            echo "$output" | jq -r '.advisories | to_entries[] | "Package: \(.value.module_name), Severity: \(.value.severity), Title: \(.value.title), URL: \(.value.url)"' >> $GITHUB_STEP_SUMMARY
          fi

  Code-Unit-Testing:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: hello-world

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run installation of dependencies commands
        run: npm install

      - name: Install Mocha, Chai and Supertest
        # Mocha: A test framework for running tests.
        # Chai: An assertion library for Node.js.
        # Supertest: A library for testing HTTP servers.
        run: npm install --save-dev mocha chai supertest

      - name: Run unit testing command
        id: npm-test
        run: |
          # Run npm test and capture output
          output=$(npm test -- --reporter=json)

          # Check if tests passed or failed
          if [ $? -eq 0 ]; then
            echo "All unit tests passed successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "Some unit tests failed. See details below:" >> $GITHUB_STEP_SUMMARY
            echo "$output" >> $GITHUB_STEP_SUMMARY  # Append test output to summary
          fi

  Snyk-Code-Scan:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Snyk CLI
        run: npm install -g snyk

      # - name: Run Snyk Code Scan And Check Snyk Scan Results
      #   id: snyk-code
      #   run: |
      #     # Run Snyk code test and capture output
      #     output=$(snyk code test --json)

      #     # Check if there were any vulnerabilities found
      #     if [ $? -eq 0 ]; then
      #       echo "Snyk Code scan completed successfully with no issues found." >> $GITHUB_STEP_SUMMARY
      #     else
      #       echo "Snyk Code scan found the following issues:" >> $GITHUB_STEP_SUMMARY
      #       echo "$output" | jq -r '.issues[] | "Issue: \(.issueType), Severity: \(.severity), Description: \(.description)"' >> $GITHUB_STEP_SUMMARY
      #     fi
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  Docker-Build:
    needs: [Security-Audit, Snyk-Code-Scan, Code-Unit-Testing]
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: hello-world

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build an image from Dockerfile
        id: docker-build
        run: |
          # Run docker build and capture output
          output=$(docker build -t ce7-grp-2-hello-world:${{ github.sha }} . 2>&1)

          # Check if the build was successful
          if [ $? -eq 0 ]; then
            echo "Docker image built successfully with tag ce7-grp-2-hello-world:${{ github.sha }}." >> $GITHUB_STEP_SUMMARY
          else
            echo "Docker build failed with the following errors:" >> $GITHUB_STEP_SUMMARY
            echo "$output" >> $GITHUB_STEP_SUMMARY  # Append build output to summary
          fi

  Snyk-Container-Scan:
    needs: Docker-Build
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: hello-world

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker Build
        run: docker build -t ce7-grp-2-hello-world:${{ github.sha }} .

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Run Snyk to check Docker image for vulnerabilities
        id: snyk-container
        run: |
          # Run Snyk container scan and capture output
          output=$(snyk container test ce7-grp-2-hello-world:${{ github.sha }} --file=Dockerfile --json)
          echo "$output" >> $GITHUB_STEP_SUMMARY

          # Check if there were any vulnerabilities found
          if [ $? -eq 0 ]; then
            echo "Snyk Container scan completed successfully with no issues found." >> $GITHUB_STEP_SUMMARY
          else
            echo "Snyk Container scan found the following issues:" >> $GITHUB_STEP_SUMMARY
            echo "$output" | jq -r '.vulnerabilities[] | "Package: \(.package), Severity: \(.severity), Description: \(.description), URL: \(.url)"' >> $GITHUB_STEP_SUMMARY
          fi
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Update-Pull-Request:
  #   needs:
  #     [
  #       Security-Audit,
  #       Code-Unit-Testing,
  #       Docker-Build,
  #       Snyk-Code-Scan,
  #       Snyk-Container-Scan,
  #     ]
  #   runs-on: ubuntu-latest

  #   defaults:
  #     run:
  #       working-directory: hello-world

  #   steps:
  #     - name: Update Pull Request
  #       if: always()
  #       uses: actions/github-script@v7
  #       env:
  #         NPM_AUDIT_OUTCOME: ${{ needs.Security-Audit.outputs.npm_audit_outcome }}
  #         NPM_TEST_OUTCOME: ${{ needs.Code-Unit-Testing.outputs.npm_test_outcome }}
  #         BUILD_OUTCOME: ${{ needs.Docker-Build.outputs.docker_build_outcome }}
  #         SNYK_CODE_OUTCOME: ${{ needs.Snyk-Code-Scan.outputs.snyk_code_outcome }}
  #         SNYK_CONTAINER_OUTCOME: ${{ needs.Snyk-Container-Scan.outputs.snyk_container_outcome }}
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: |
  #           const output = `#### NPM Security Audit ‚öôÔ∏è\`${process.env.NPM_AUDIT_OUTCOME}\`
  #           #### NPM Unit Test ‚öôÔ∏è\`${process.env.NPM_TEST_OUTCOME}\`
  #           #### Snyk Code Test üîç\`${process.env.SNYK_CODE_OUTCOME}\`
  #           #### Docker Build üèóÔ∏è\`${process.env.BUILD_OUTCOME}\`
  #           #### Synk Container Test üîç\`${process.env.SNYK_CONTAINER_OUTCOME}\`

  #           *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

  #           github.rest.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: output
  #           })
